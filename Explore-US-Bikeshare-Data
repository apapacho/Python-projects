import time
import pandas as pd
import numpy as np

CITY_DATA = {'chicago': 'chicago.csv',
             'new york city': 'new_york_city.csv',
             'washington': 'washington.csv'}


def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    # TO DO: get user input for city (chicago, new york city, washington).
    # HINT: Use a while loop to handle invalid inputs

    print('Hello! Let\'s explore some US bikeshare data!')
    city = input('Among Chicago, New York, Washington, which city you want to look into?: ').lower()
    while city not in CITY_DATA.keys():
        city = input('Sorry, select an available option. Choose a city between: Chicago, New York, Washington').lower()

    # Get a filter type from users
    filter_type = input(
        'Would you like to filter the info by the month,day, both or none? Type any of these words: ').lower()
    while filter_type not in ['month', 'day', 'both', 'none']:
        filter_type = input('Wrong option, enter it again: ')

    if filter_type == 'month' or filter_type == 'both':
        # TO DO: get user input for month (all, january, february, ... , june)
        month = input('What month would you like to get information, from january through june or all?: ').lower()
        while month not in ['january', 'february', 'march', 'april', 'may', 'june']:
            month = input('Sorry, select an available month option.').lower()
    else:
        month = 'all'

    print('-' * 40)
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    if filter_type == 'day' or filter_type == 'both':
        day = input('Provide a day of week: ').lower()

        while day not in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']:
            day = input('Day of the week you entered is invalid. please enter again: ').lower()
    else:
        day = 'all'

    print('-' * 40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    num_rows = df.shape[0]
    num_cols = df.shape[1]

    # Start and End Time to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['End Time'] = pd.to_datetime(df['End Time'])

    # columns month and weekday
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.isocalendar().week

    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1

        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]
    return df, num_rows, num_cols


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    # mode() The mode of a set of values is the value that appears most often. It can be multiple values.
    print("The most common month is: {}".format(
        str(df['month'].mode().values[0]))
    )

    # TO DO: display the most common day of week
    c_day = df['day_of_week'].mode()[0]
    print('The most common weekday: {}'.format(c_day))

    # TO DO: display the most common start hour
    df['start_hour'] = df['Start Time'].dt.hour
    print('The most common start hour: {}'.format(
        str(df['start_hour'].mode().values[0])
    ))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    print('The most common used start station is: {}'.format(
        str(df['Start Station'].mode().values[0])
    ))
    # TO DO: display most commonly used end station
    print('The most common used end station is: {} '.format(
        str(df['End Station'].mode().values[0])
    ))
    # TO DO: display most frequent combination of start station and end station trip
    df['trip'] = df['Start Station'] + " to " + df['End Station']
    print('The most common combination of start and end station is: {}'.format(
        df['trip'].mode().values[0]
    ))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print('The total travel time is {}'.format(str(df['Trip Duration'].sum())))
    # TO DO: display mean travel time
    print('The total travel time is: {}'.format(str(df['Trip Duration'].mean())))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    if 'Gender' in df.columns:
        # TO DO: Display counts of user types
        df['User Type'].value_counts()
        # TO DO: Display counts of gender
        df['Gender'].value_counts()
        # TO DO: Display earliest, most recent, and most common year of birth
        print('The earliest birth is: {}'.format(str(df['Birth Year'].min())))
        print('The most common birth is: {}'.format(str(df.mode()['Birth Year'][0])))
    else:
        print('The Column Gender or User Type was not found.')
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 40)


def show_data(df):

    view_data = input('Would you like to view 5 rows of individual trip data? Enter yes or no: ')
    if view_data == 'yes':
        start_loc = 0
        while True:
            print(df.iloc[start_loc:start_loc + 5, :])
            start_loc += 5
            view_display = input('Do you wish to continue? ').lower()
            if view_display == 'yes':
                print(df.iloc[start_loc:start_loc + 5, :])
            else:
                break


def main():
    while True:
        city, month, day = get_filters()
        df, num_rows, num_cols = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
    main()
